import streamlit as st
import os
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from src.config.config import MODEL_SAVE_PATH, IMG_HEIGHT, IMG_WIDTH
from src.data.data_loader import DataLoader
import unicodedata

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="H·ªÜ TH·ªêNG PH√ÇN LO·∫†I T√åNH TR·∫†NG TR√ÅI C√ÇY",
    page_icon="üçé",
    layout="wide"
)

# Load model
@st.cache_resource
def load_trained_model():
    try:
        model = load_model(MODEL_SAVE_PATH)
        return model
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i model: {str(e)}")
        return None

# H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh
def preprocess_image(img):
    img = image.load_img(img, target_size=(IMG_HEIGHT, IMG_WIDTH))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c dataset
SCRIPT_DIR = os.path.dirname(__file__)
DATASET_PATH = os.path.join(SCRIPT_DIR, 'dataset')

# H√†m ƒë·∫øm s·ªë l∆∞·ª£ng ·∫£nh d·ª±a tr√™n lo·∫°i tr√°i c√¢y v√† t√¨nh tr·∫°ng
def count_images_by_fruit_type_and_status(fruit_type):
    fresh_count = 0
    rotten_count = 0
    for root_dir in ['train']:
        # Convert fruit_type to lowercase and remove Vietnamese diacritics
        fruit_type_normalized = unicodedata.normalize('NFKD', fruit_type).encode('ascii', 'ignore').decode('utf-8')
        fruit_type_lower = fruit_type_normalized.lower()

        fresh_dir = os.path.join(DATASET_PATH, root_dir, f'{fruit_type_lower}_tuoi')
        rotten_dir = os.path.join(DATASET_PATH, root_dir, f'{fruit_type_lower}_hong')
        
        if os.path.exists(fresh_dir):
            fresh_count += len(os.listdir(fresh_dir))
        if os.path.exists(rotten_dir):
            rotten_count += len(os.listdir(rotten_dir))
    return fresh_count, rotten_count

# Danh s√°ch t√™n c√°c l·ªõp
data_loader = DataLoader()
class_names = data_loader.get_class_names()

# ƒê·ªçc v√† √°p d·ª•ng CSS
def load_css():
    with open("static/style.css", encoding="utf-8") as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

load_css()

# Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c images n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists('images'):
    os.makedirs('images')

# Header section
st.markdown('<div class="header-container">', unsafe_allow_html=True)
col1, col2 = st.columns([0.5, 3])
with col1:
    try:
        st.image('pic_logo/logo.png', width=100)
    except:
        st.warning("Kh√¥ng th·ªÉ t·∫£i logo. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ·∫£nh.")
with col2:
    st.markdown('<h1 class="header-title">H·ªÜ TH·ªêNG PH√ÇN LO·∫†I T√åNH TR·∫†NG TR√ÅI C√ÇY</h1>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Welcome message
st.markdown('<div class="chart-container" style="background-color: white; border-radius: 10px; margin: 10px auto; padding: 20px; display: flex; align-items: center; justify-content: center;"><p style="font-size: 25px; font-weight: bold; color: #2c3e50; text-align: center; margin: 0;">Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng ph√¢n lo·∫°i tr√°i c√¢y! H√£y t·∫£i l√™n m·ªôt b·ª©c ·∫£nh ƒë·ªÉ m√¥ h√¨nh gi√∫p b·∫°n ph√¢n lo·∫°i t√¨nh tr·∫°ng tr√°i c√¢y.</p></div>', unsafe_allow_html=True)

# Hi·ªÉn th·ªã h√¨nh ·∫£nh 
st.markdown('<div class="chart-wrapper">', unsafe_allow_html=True)
col1, col2 = st.columns(2)
with col1:
    st.image('images/train_val_acc.jpg', caption='Bi·ªÉu ƒë·ªì 1 ', use_container_width=True)
with col2:
    st.image('images/train_val_loss.jpg', caption='Bi·ªÉu ƒë·ªì 2', use_container_width=True)
st.markdown('</div>', unsafe_allow_html=True)

# Sidebar section
with st.sidebar:
    st.markdown('<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: left;"><p style="font-size: 20px; text-align: left; margin: 0; font-weight: bold;">T√πy ch·ªçn</p></div>', unsafe_allow_html=True)
    selected_option = st.selectbox("S·ªë l∆∞·ª£ng ·∫£nh ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh cho c√°c lo·∫°i tr√°i c√¢y", ["Chu·ªëi", "Cam", "T√°o"])
    
    # Display image count for selected fruit type
    if selected_option:
        fresh_count, rotten_count = count_images_by_fruit_type_and_status(selected_option)
        st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 18px; text-align: center; margin: 0; font-weight: bold;">S·ªë l∆∞·ª£ng ·∫£nh {selected_option}:</p></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 5px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 16px; text-align: center; margin: 0;">T∆∞∆°i: {fresh_count} ·∫£nh</p></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 5px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 16px; text-align: center; margin: 0;">H·ªèng: {rotten_count} ·∫£nh</p></div>', unsafe_allow_html=True)

    # Th·ªëng k√™
    st.markdown("---")
    st.markdown('<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">Dataset: 13,599 ·∫£nh</p></div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Main content area
st.markdown('<div class="main">', unsafe_allow_html=True)

# Upload section
st.markdown('<div class="upload-area">', unsafe_allow_html=True)
st.markdown("### T·∫£i l√™n ·∫£nh tr√°i c√¢y")
uploaded_file = st.file_uploader("Ch·ªçn h√¨nh ·∫£nh tr√°i c√¢y", type=["jpg", "jpeg", "png"])
st.markdown('</div>', unsafe_allow_html=True)

# Load model
model = load_trained_model()

# X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒë√£ t·∫£i l√™n ·∫£nh
if uploaded_file is not None and model is not None:
    try:
        st.markdown('<div class="result-section">', unsafe_allow_html=True)
        col1, col2 = st.columns(2)
        with col1:
            img = st.image(uploaded_file, caption='·∫¢nh ƒë√£ t·∫£i l√™n', use_container_width=True)
        with col2:
            st.write("·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!")
            st.write("ƒêang ph√¢n t√≠ch h√¨nh ·∫£nh...")
            
            # N√∫t ph√¢n lo·∫°i
            if st.button("Ph√¢n lo·∫°i tr√°i c√¢y", type="primary"):
                st.write("ƒêang th·ª±c hi·ªán ph√¢n lo·∫°i...")
                
                # Thanh ti·∫øn tr√¨nh
                st.markdown('<div class="progress-container">', unsafe_allow_html=True)
                progress_bar = st.progress(0)
                for i in range(100):
                    progress_bar.progress(i + 1)
                st.markdown('</div>', unsafe_allow_html=True)
                
                # L∆∞u file t·∫°m th·ªùi
                temp_path = "temp_image.jpg"
                with open(temp_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Ti·ªÅn x·ª≠ l√Ω v√† d·ª± ƒëo√°n
                img_array = preprocess_image(temp_path)
                predictions = model.predict(img_array)
                predicted_class = np.argmax(predictions[0])
                confidence = float(predictions[0][predicted_class])
                
                # X√≥a file t·∫°m
                os.remove(temp_path)
                
                st.success("Ph√¢n lo·∫°i ho√†n t·∫•t!")
                
                # K·∫øt qu·∫£ ph√¢n lo·∫°i
                st.markdown("### K·∫øt qu·∫£ ph√¢n lo·∫°i")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.markdown('<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">Lo·∫°i tr√°i c√¢y</p></div>', unsafe_allow_html=True)
                with col2:
                    st.markdown('<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">T√¨nh tr·∫°ng</p></div>', unsafe_allow_html=True)
                with col3:
                    st.markdown('<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">ƒê·ªô tin c·∫≠y</p></div>', unsafe_allow_html=True)
                
                col1_val, col2_val, col3_val = st.columns(3)
                with col1_val:
                    loai_trai_cay_value = class_names[predicted_class].split()[0]
                    st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">{loai_trai_cay_value}</p></div>', unsafe_allow_html=True)
                with col2_val:
                    tinh_trang_value = 'T·ªët' if 't∆∞∆°i' in class_names[predicted_class] else 'H·ªèng'
                    st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">{tinh_trang_value}</p></div>', unsafe_allow_html=True)
                with col3_val:
                    st.markdown(f'<div class="metric-card" style="height: 50px; background-color: white; border-radius: 10px; margin: 10px auto; display: flex; align-items: center; justify-content: center;"><p style="font-size: 20px; text-align: center; margin: 0; font-weight: bold;">{confidence*100:.2f}%</p></div>', unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã chi ti·∫øt d·ª± ƒëo√°n
                st.markdown("### Chi ti·∫øt d·ª± ƒëo√°n")
                for i, (class_name, conf) in enumerate(zip(class_names, predictions[0])):
                    st.progress(float(conf), text=f"{class_name}: {conf*100:.2f}%")
                
        st.markdown('</div>', unsafe_allow_html=True)
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh: {str(e)}")

st.markdown('</div>', unsafe_allow_html=True)
